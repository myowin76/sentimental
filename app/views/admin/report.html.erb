<header>
  <h1><span style="color:#b42626">Client</span> Sentiment Pulse Report</h1>
  <p>Pick the date range you want to examine the sentiment pulse for and then optionally filter the data on campaign name, target word and use the sentiment value slider to set the maximum sentiment value.</p>
</header>

<div class="filter row">
	<%= form_tag admin_report_path, :method => 'get' do %>
    <div class="col-sm-2">
      <%= text_field_tag :date_from, params[:date_from], id: 'date_from', placeholder: 'Date From', class: 'form-control datepicker-input' %>
      
    </div>
    <div class="col-sm-2">
      <%= text_field_tag :date_to, params[:date_to], id: 'date_to', placeholder: 'Date To', class: 'form-control datepicker-input' %>
    </div>
    <div class="col-sm-3">
    	
      <% if params[:survey].present?   %>
        <%= select_tag "survey", options_from_collection_for_select(@surveys, "id", "name", params[:survey]), class: 'form-control' %>
        <%#= collection_select(:survey, :survey_id, @surveys, :id, :name, 
          {:selected => params[:survey_id], :include_blank => 'All Surveys'}, {class: 'form-control'}) %>

        <%#= select_tag "credit_card", options_for_select([ "VISA", "MasterCard" ], "MasterCard") %>
      <% else %>
        <%= select_tag "survey", options_from_collection_for_select(@surveys, "id", "name"), class: 'form-control' %>
        <%#= collection_select(:survey, :survey_id, @surveys, :id, :name, { prompt: 'All Surveys'}, {class: 'form-control'})  %>
        <%#= select("survey", "survey_id", @surveys.collect {|p| [ p.name, p.id ] }, {:prompt => 'All Surveys'}, {class: 'form-control'}) %>
      <% end %>  
    </div>
    <div class="col-sm-3">
      <%= text_field_tag :search, params[:search], placeholder: 'Target word', class: 'form-control' %>
    </div>
    <div class="col-sm-2">
      <%= submit_tag "Update", :name => nil, class: 'btn btn-default' %>
    </div>
  <% end %>
	
</div>
<div>
  <% unless @survey.nil? %>
    <% @client_surveys.each do |cs| %>
      <%= cs.text %> | <%= cs.created_at.strftime('%d %h %Y') %> | <%= cs.score %><br>
    <% end %>  
  <% end %>
</div>

<div class="row">
  <div id="chartdiv" style="min-width: 310px; height: 500px; margin: 0 auto"></div>
</div>

<%= render 'partials/socials'%>
<br><br><br>

<% content_for :scripts do %>
  
  <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
  <script src="http://d3js.org/d3.v3.min.js"></script>
                     
  <script type="text/javascript">
  
  $(function () {
      $( "#date_from" ).datepicker({
        defaultDate: "+1w",
        changeMonth: true,
        dateFormat: 'dd/mm/yy',
        onClose: function( selectedDate ) {
          $( "#date_to" ).datepicker( "option", "minDate", selectedDate );
        }
      });
      $( "#date_to" ).datepicker({
        defaultDate: "+1w",
        changeMonth: true,
        dateFormat: 'dd/mm/yy',
        onClose: function( selectedDate ) {
          $( "#date_from" ).datepicker( "option", "maxDate", selectedDate );
        }
      });


     }); 

    var n = 20, // number of layers
        m = 200, // number of samples per layer
        stack = d3.layout.stack().offset("wiggle"),
        layers0 = stack(d3.range(n).map(function() { return bumpLayer(m); })),
        layers1 = stack(d3.range(n).map(function() { return bumpLayer(m); }));

    var width = 1170,
        height = 500;

    var x = d3.scale.linear()
        .domain([0, m - 1])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, d3.max(layers0.concat(layers1), function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); })])
        .range([height, 0]);

    var color = d3.scale.linear()
        .range(["#aadfff", "#ff0011", "red"]);

    var area = d3.svg.area()
        .x(function(d) { return x(d.x); })
        .y0(function(d) { return y(d.y0); })
        .y1(function(d) { return y(d.y0 + d.y); });

    var svg = d3.select("#chartdiv").append("svg")
        .attr("width", width)
        .attr("height", height);

    svg.selectAll("path")
        .data(layers0)
      .enter().append("path")
        .attr("d", area)
        .style("fill", function() { return color(Math.random()); });

    function transition() {
      d3.selectAll("path")
          .data(function() {
            var d = layers1;
            layers1 = layers0;
            return layers0 = d;
          })
        .transition()
          .duration(2500)
          .attr("d", area);
    }

    // Inspired by Lee Byron's test data generator.
    function bumpLayer(n) {

      function bump(a) {
        var x = 1 / (.1 + Math.random()),
            y = 2 * Math.random() - .5,
            z = 10 / (.1 + Math.random());
        for (var i = 0; i < n; i++) {
          var w = (i / n - y) * z;
          a[i] += x * Math.exp(-w * w);
        }
      }

      var a = [], i;
      for (i = 0; i < n; ++i) a[i] = 0;
      for (i = 0; i < 5; ++i) bump(a);
      return a.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });
    }

    </script>

<% end %>